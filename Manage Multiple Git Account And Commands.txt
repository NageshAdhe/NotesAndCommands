1. Generate SSH Keys for account for personal and work account
	Personal : $ ssh-keygen -t rsa -C "email@personal_mail.com" -f "id_rsa_personal_user1"
	Work : $ ssh-keygen -t rsa -C "email@work_mail.com" -f "id_rsa_work_user1"
	
	We have two different keys created:
		~/.ssh/id_rsa_personal_user1
		~/.ssh/id_rsa_work_user1
		
2. Adding the new SSH key to the corresponding GitHub account
		1.Go to Settings
		2.Select SSH and GPG keys from the menu to the left.
		3.Click on New SSH key, provide a suitable title, and paste the key in the box below
		4.Click Add key — and you’re done!
		
3 . Registering the new SSH Keys with the ssh-agent
	To use the keys, we have to register them with the ssh-agent on our machine. 
	Ensure ssh-agent is running using the command eval "$(ssh-agent -s)".
	Add the keys to the ssh-agent like so:
	
		ssh-add ~/.ssh/id_rsa_personal_user1
		ssh-add ~/.ssh/id_rsa_work_user1

4. Creating the SSH config File

		$ cd ~/.ssh/
		$ touch config           // Creates the file if not exists
		$ code config            // Opens the file in VS code, use any editor
		
		write a details like as below:
		
		# Personal account, - the default config
		Host github.com
		   HostName github.com
		   User git
		   IdentityFile ~/.ssh/id_rsa_personal_user1
		   
		# Work account-1
		Host github.com-work_user1    
		   HostName github.com
		   User git
		   IdentityFile ~/.ssh/id_rsa_work_user1
		   
5. ====================One active SSH key in the ssh-agent at a time=============
	ssh-add -l will list all the SSH keys attached to the ssh-agent. 
	Remove all of them and add the one key you are about to use.
		
		$ eval `ssh-agent -s`  ===> TO start Agent
	
		$ ssh-add -D            //removes all ssh entries from the ssh-agent
		$ ssh-add ~/.ssh/id_rsa                 // Adds the relevant ssh key
		
		######### AFETR THAT YOU CAN CONFIGURE GIT ACCOUNT############
		
		git config user.name "User 1"   // Updates git config user name
		git config user.email "user1@workMail.com"